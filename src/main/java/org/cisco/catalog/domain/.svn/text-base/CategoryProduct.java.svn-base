package org.cisco.catalog.domain;

import java.util.List;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.transaction.annotation.Transactional;

@Configurable
@Entity
@Table(name = "categories_products")
public class CategoriesProducts {

    @EmbeddedId
    private CategoriesProductsPK id;

    @PersistenceContext
    transient EntityManager entityManager;

    public CategoriesProductsPK getId() {
        return this.id;
    }

    public void setId(CategoriesProductsPK id) {
        this.id = id;
    }

    public String toString() {
        return ReflectionToStringBuilder.toString(this, ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public static final EntityManager entityManager() {
        EntityManager em = new CategoriesProducts().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long countCategoriesProductses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM CategoriesProducts o", Long.class).getSingleResult();
    }

    public static List<org.cisco.catalog.domain.CategoriesProducts> findAllCategoriesProductses() {
        return entityManager().createQuery("SELECT o FROM CategoriesProducts o", CategoriesProducts.class).getResultList();
    }

    public static org.cisco.catalog.domain.CategoriesProducts findCategoriesProducts(CategoriesProductsPK id) {
        if (id == null) return null;
        return entityManager().find(CategoriesProducts.class, id);
    }

    public static List<org.cisco.catalog.domain.CategoriesProducts> findCategoriesProductsEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM CategoriesProducts o", CategoriesProducts.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    @Transactional
    public void persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            CategoriesProducts attached = CategoriesProducts.findCategoriesProducts(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public org.cisco.catalog.domain.CategoriesProducts merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        CategoriesProducts merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
}
